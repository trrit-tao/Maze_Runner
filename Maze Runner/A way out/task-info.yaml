type: edu
custom_name: stage4
files:
- name: src/maze/Main.java
  visible: true
  text: |
    package maze;


    import action.AComands.*;

    import java.util.HashMap;
    import java.util.Map;
    import java.util.Scanner;

    public class Main {
        static Scanner scanner = new Scanner(System.in);
        static Map<String, Commands> loadingExitNotCommand = new HashMap<>();
        static  {
            loadingExitNotCommand.put("1", Maze.getInstance());
            loadingExitNotCommand.put("2", new Loading());
            loadingExitNotCommand.put("3", new Save());
            loadingExitNotCommand.put("4", new Print());
            loadingExitNotCommand.put("0", new Exit());
            loadingExitNotCommand.put("NotCommands", new NotMenu());
        }


        public static void main(String[] args) {
            start();
            while (true){
                System.out.println("=== Menu ===\n" +
                        "1. Generate a new maze\n" +
                        "2. Load a maze\n" +
                        "3. Save the maze\n" +
                        "4. Display the maze\n" +
                        "0. Exit");
                String numbMenu = scanner.nextLine();
                loadingExitNotCommand.getOrDefault(numbMenu,loadingExitNotCommand.get("NotCommands")).action();

            }
        }


        private static void start() {
                System.out.println("=== Menu ===\n" +
                        "1. Generate a new maze\n" +
                        "2. Load a maze\n" +
                        "0. Exit");
                String menuSelection = scanner.nextLine();
                loadingExitNotCommand.getOrDefault(menuSelection,loadingExitNotCommand.get("NotCommands")).action();
        }
    }
  learner_created: false
- name: test/MazeRunnerTest.java
  visible: false
  text: |
    import maze.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum Elem {
        WALL, EMPTY, PATH, DUMMY;

        static Elem get(char c) {
            if (c == '\u2588') {
                return WALL;
            } else if (c == ' ') {
                return EMPTY;
            } else if (c == '/') {
                return PATH;
            } else {
                return null;
            }
        }
    }

    class Maze {

        // maze[height][width]
        // maze[row][col]
        Elem[][] maze;

        Maze(Maze other) {
            maze = new Elem[other.getHeight()][other.getWidth()];
            for (int h = 0; h < other.getHeight(); h++) {
                for (int w = 0; w < other.getWidth(); w++) {
                    maze[h][w] = other.maze[h][w];
                }
            }
        }

        Maze(List<String> lines) throws Exception {

            int lineCount = 1;
            for (String line : lines) {
                if (line.length() % 2 != 0) {
                    throw new Exception("Line " + lineCount + " of the maze " +
                        "contains odd number of characters. Should be always even.");
                }

                for (char c : line.toCharArray()) {
                    if (Elem.get(c) == null) {
                        String hex = Integer.toHexString((int)c);
                        throw new Exception(
                            "Found strange symbol in the " + lineCount +
                                " line of the maze: \\u" + hex);
                    }
                }

                int lineWidth = line.length() / 2;

                for (int currWidth = 0; currWidth < lineWidth; currWidth++) {
                    int currIndex = currWidth * 2;
                    int nextIndex = currIndex + 1;

                    char currChar = line.charAt(currIndex);
                    char nextChar = line.charAt(nextIndex);

                    if (currChar != nextChar) {
                        throw new Exception("There are symbols in " +
                            "this line that don't appear twice in a row " +
                            "(at indexes " + currIndex + " and " + nextIndex + ").\n" +
                            "Line: \"" + line + "\"");
                    }
                }

                lineCount++;
            }

            int mazeWidth = lines.get(0).length() / 2;
            int mazeHeight = lines.size();

            lineCount = 1;
            for (String line : lines) {
                if (line.length() / 2 != mazeWidth) {
                    throw new Exception("The first line of the maze contains " +
                        lines.get(0).length() + " characters, but the line #" +
                        lineCount + " contains " + line.length() + " characters.");
                }
                lineCount++;
            }

            maze = new Elem[mazeHeight][mazeWidth];

            for (int currHeight = 0; currHeight < mazeHeight; currHeight++) {
                String line = lines.get(currHeight);
                for (int currWidth = 0; currWidth < mazeWidth; currWidth++) {
                    char c = line.charAt(currWidth * 2);
                    maze[currHeight][currWidth] = Elem.get(c);
                }
            }

            if (maze[0][0] != Elem.WALL ||
                maze[0][mazeWidth - 1] != Elem.WALL ||
                maze[mazeHeight - 1][0] != Elem.WALL ||
                maze[mazeHeight - 1][mazeWidth - 1] != Elem.WALL) {
                throw new Exception("All four corners of the maze must be walls.");
            }

            for (int h = 0; h <= mazeHeight - 3; h++) {
                for (int w = 0; w <= mazeWidth - 3; w++) {
                    if (getElem(h, w) == Elem.WALL &&
                        getElem(h, w + 1) == Elem.WALL &&
                        getElem(h, w + 2) == Elem.WALL &&

                        getElem(h + 1, w) == Elem.WALL &&
                        getElem(h + 1, w + 1) == Elem.WALL &&
                        getElem(h + 1, w + 2) == Elem.WALL &&

                        getElem(h + 2, w) == Elem.WALL &&
                        getElem(h + 2, w + 1) == Elem.WALL &&
                        getElem(h + 2, w + 2) == Elem.WALL) {

                        throw new Exception("There are 3x3 block in the maze " +
                            "consisting only of walls. Such blocks are not allowed.");
                    }
                }
            }
        }

        Elem[] getRow(int rowNum) {
            Elem[] newRow = new Elem[getWidth()];
            for (int i = 0; i < getWidth(); i++) {
                newRow[i] = maze[rowNum][i];
            }
            return newRow;
        }

        Elem[] getCol(int colNum) {
            Elem[] newCol = new Elem[getHeight()];
            for (int i = 0; i < getHeight(); i++) {
                newCol[i] = maze[i][colNum];
            }
            return newCol;
        }

        Elem getElem(int height, int width) {
            return maze[height][width];
        }

        void setElem(int height, int width, Elem elem) {
            maze[height][width] = elem;
        }

        int getWidth() {
            return maze[0].length;
        }

        int getHeight() {
            return maze.length;
        }

        Maze copy() {
            return new Maze(this);
        }

        int count(Elem toCount) {
            int sum = 0;
            for (Elem[] row : maze) {
                for (Elem e : row) {
                    if (e == toCount) {
                        sum++;
                    }
                }
            }
            return sum;
        }

        int countAround(int h, int w, Elem elem) {
            int sum = 0;

            if (h + 1 < getHeight() &&
                getElem(h + 1, w) == elem) {
                sum++;
            }

            if (h - 1 >= 0 &&
                getElem(h - 1, w) == elem) {
                sum++;
            }

            if (w + 1 < getWidth() &&
                getElem(h, w + 1) == elem) {
                sum++;
            }

            if (w - 1 >= 0 &&
                getElem(h, w - 1) == elem) {
                sum++;
            }

            return sum;
        }

        int countEntrances() {
            int entranceCount = 0;
            for (Elem[] line : new Elem[][] {
                getCol(0),
                getCol(getWidth() - 1),
                getRow(0),
                getRow(getHeight() - 1)
            }) {

                for (Elem e : line) {
                    if (e != Elem.WALL) {
                        entranceCount++;
                    }
                }
            }
            return entranceCount;
        }

        private void propagate(Elem from, Elem to) {
            boolean didPropagate = true;
            while (didPropagate) {
                didPropagate = false;
                for (int h = 0; h < getHeight(); h++) {
                    for (int w = 0; w < getWidth(); w++) {
                        if (getElem(h, w) == from) {
                            if (countAround(h, w, to) > 0) {
                                didPropagate = true;
                                setElem(h, w, to);
                            }
                        }
                    }
                }
            }
        }

        int checkAccessibility() {
            int entranceHeight = 0;
            int entranceWidth = 0;

            findPoints: {
                for (int currWidth : new int[] {0, getWidth() - 1}) {
                    for (int currHeight = 0; currHeight < getHeight(); currHeight++) {
                        if (getElem(currHeight, currWidth) != Elem.WALL) {
                            entranceHeight = currHeight;
                            entranceWidth = currWidth;
                            break findPoints;
                        }
                    }
                }

                for (int currHeight : new int[] {0, getHeight() - 1}) {
                    for (int currWidth = 0; currWidth < getWidth(); currWidth++) {
                        if (getElem(currHeight, currWidth) != Elem.WALL) {
                            entranceHeight = currHeight;
                            entranceWidth = currWidth;
                            break findPoints;
                        }
                    }
                }
            }

            Maze copy = copy();
            copy.setElem(entranceHeight, entranceWidth, Elem.PATH);
            copy.propagate(Elem.EMPTY, Elem.PATH);

            return copy.count(Elem.EMPTY);
        }

        int checkPath() throws Exception {
            int entranceHeight = 0;
            int entranceWidth = 0;

            for (int currWidth : new int[] {0, getWidth() - 1}) {
                for (int currHeight = 0; currHeight < getHeight(); currHeight++) {
                    if (getElem(currHeight, currWidth) == Elem.EMPTY) {
                        throw new Exception("If the maze is solved all " +
                            "the entrances should be marked with '//' characters");
                    }
                    if (getElem(currHeight, currWidth) == Elem.PATH) {
                        entranceHeight = currHeight;
                        entranceWidth = currWidth;
                    }
                }
            }

            for (int currHeight : new int[] {0, getHeight() - 1}) {
                for (int currWidth = 0; currWidth < getWidth(); currWidth++) {
                    if (getElem(currHeight, currWidth) == Elem.EMPTY) {
                        throw new Exception("If the maze is solved all " +
                            "the entrances should be marked with '//' characters");
                    }
                    if (getElem(currHeight, currWidth) == Elem.PATH) {
                        entranceHeight = currHeight;
                        entranceWidth = currWidth;
                    }
                }
            }

            for (int h = 0; h < getHeight(); h++) {
                for (int w = 0; w < getWidth(); w++) {
                    if (getElem(h, w) == Elem.PATH) {
                        if (countAround(h, w, Elem.PATH) >= 3) {
                            throw new Exception("The escape path shouldn't branch off, " +
                                "it should go in one direction.");
                        }
                    }
                }
            }

            Maze copy = copy();
            copy.setElem(entranceHeight, entranceWidth, Elem.DUMMY);
            copy.propagate(Elem.PATH, Elem.DUMMY);

            return copy.count(Elem.PATH);
        }

        boolean equals(Maze other) {
            if (getWidth() != other.getWidth() || getHeight() != other.getHeight()) {
                return false;
            }
            for (int h = 0; h < getHeight(); h++) {
                for (int w = 0; w < getWidth(); w++) {
                    if (getElem(h, w) == Elem.WALL && other.getElem(h, w) != Elem.WALL ||
                        getElem(h, w) != Elem.WALL && other.getElem(h, w) == Elem.WALL) {
                        return false;
                    }
                }
            }
            return true;
        }

        static List<Maze> parse(String text) throws Exception {

            List<Maze> mazes = new ArrayList<>();

            List<String> lines = text
                .lines()
                .collect(Collectors.toList());

            lines.add("");

            List<String> mazeLines = new ArrayList<>();

            boolean isStarted = false;
            for (String line : lines) {
                if (line.contains("\u2588")) {
                    isStarted = true;
                    mazeLines.add(line);
                } else if (isStarted) {
                    isStarted = false;
                    Maze maze = new Maze(mazeLines);
                    mazes.add(maze);
                    mazeLines.clear();
                }
            }

            return mazes;
        }

    }

    class Clue {
        int size;
        boolean withPath;
        int count;
        Clue(int s, int c, boolean wp) {
            size = s;
            count = c;
            withPath = wp;
        }
    }

    public class MazeRunnerTest extends StageTest<Clue> {

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<Clue>()
                    .setInput("1\n17\n0")
                    .setAttach(new Clue(17, 1, false)),

                new TestCase<Clue>()
                    .setInput("1\n29\n3\ntest_maze.txt\n0")
                    .setAttach(new Clue(29, 1, false)),

                new TestCase<Clue>()
                    .setInput("2\ntest_maze.txt\n4\n0")
                    .setAttach(new Clue(29, 1, false)),

                new TestCase<Clue>()
                    .setInput("1\n35\n3\ntest_maze.txt\n0")
                    .setAttach(new Clue(35, 1, false)),

                new TestCase<Clue>()
                    .setInput("2\ntest_maze.txt\n4\n0")
                    .setAttach(new Clue(35, 1, false)),

                new TestCase<Clue>()
                    .setInput("2\ntest_maze.txt\n4\n5\n0")
                    .setAttach(new Clue(35, 2, true))
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<Maze> mazes;
            try {
                mazes = Maze.parse(reply);
            } catch (Exception e) {
                return CheckResult.wrong(
                    e.getMessage()
                );
            }

            if (mazes.size() == 0) {
                return CheckResult.wrong(
                    "No mazes found in the output. Check if you are using " +
                        "\\u2588 character to print the maze."
                );
            }

            if (mazes.size() != clue.count) {
                if (clue.count == 1) {
                    return CheckResult.wrong(
                        "Found " + mazes.size() + " mazes in the output. " +
                            "Should be only one maze."
                    );
                } else {
                    return CheckResult.wrong(
                        "Found " + mazes.size() + " mazes in the output. " +
                            "Should be two mazes."
                    );
                }
            }

            Maze fst = mazes.get(0);
            Maze snd = mazes.size() == 2 ? mazes.get(1) : null;

            if (snd != null && !fst.equals(snd)) {
                return CheckResult.wrong(
                    "The two mazes shown should be equal, but they are different."
                );
            }

            if (fst.count(Elem.PATH) != 0) {
                return CheckResult.wrong(
                    "The first maze should not contain '/' characters."
                );
            }

            int entrances = fst.countEntrances();
            if (entrances != 2) {
                return new CheckResult(false,
                    "There are " + entrances + " entrances to the maze, " +
                        "should be only two.");
            }

            int emptyLeft = fst.checkAccessibility();
            if (emptyLeft > 0) {
                return new CheckResult(false,
                    "There are " + emptyLeft + " empty " +
                        "cells that are inaccessible from the entrance of the maze " +
                        "(or there is no way from the entrance to the exit)."
                );
            }

            if (fst.getHeight() != clue.size) {
                return new CheckResult(false,
                    "Number of rows in the maze is incorrect. " +
                        "It's " + fst.getHeight() + ", but should be " + clue.size);
            }

            if (fst.getWidth() != clue.size) {
                return new CheckResult(false,
                    "Number of columns in the maze is incorrect. " +
                        "It's " + fst.getWidth() + ", but should be " + clue.size);
            }

            if (snd != null && clue.withPath) {
                try {
                    int pathLeft = snd.checkPath();
                    if (pathLeft > 0) {
                        return new CheckResult(false,
                            "There are " + pathLeft + " escape path ('//') " +
                                "cells that are separated from the escape path of the maze " +
                                "(or there is a break somewhere in the escape path)."
                        );
                    }
                } catch (Exception e) {
                    return CheckResult.wrong(
                        e.getMessage()
                    );
                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/maze/action/Border.java
  visible: true
  text: |
    package maze.action;


    import java.util.ArrayList;
    import java.util.List;

    public class Border implements GraphElement {
        private final String value = "\u2588\u2588";

        @Override
        public void print() {
            System.out.print(value);
        }

        @Override
        public void set(GraphElement cell) {
        }

        @Override
        public void setFlag() {
        }

        @Override
        public boolean getFlag(){
            return false;
        }

        @Override
        public void openPath() {
        }

        @Override
        public void routePrint() {

        }

        @Override
        public List<GraphElement> getList() {
            return new ArrayList<>();
        }

        @Override
        public String toString(){
            return value;
        }
    }
  learner_created: true
- name: src/maze/action/GraphElement.java
  visible: true
  text: |
    package maze.action;

    import java.util.List;

    public interface GraphElement {
        void print();
        void set(GraphElement cell);
        void setFlag();
        boolean getFlag();
        void openPath();
        void routePrint();
        List<GraphElement> getList();
    }
  learner_created: true
- name: src/maze/action/Edge.java
  visible: true
  text: |
    package maze.action;


    import java.util.ArrayList;
    import java.util.List;

    public class Edge implements GraphElement {
        private final List<GraphElement> nodes = new ArrayList<>();
        private String value = "\u2588\u2588";


        @Override
        public void routePrint(){
            value = "//";
        }

        @Override
        public void print() {
            System.out.print(value);
        }

        @Override
        public void set(GraphElement graphElement) {
            nodes.add(graphElement);
        }

        @Override
        public void setFlag() {
        }

        @Override
        public boolean getFlag(){
            return false;
        }


        @Override
        public void openPath() {
            value = "  ";
        }

        @Override
        public List<GraphElement> getList() {
            return nodes;
        }

        @Override
        public String toString(){
            return value;
        }
    }
  learner_created: true
- name: src/maze/action/Node.java
  visible: true
  text: |-
    package maze.action;


    import java.util.ArrayList;
    import java.util.List;

    public class Node implements GraphElement {
        private final List<GraphElement> edges = new ArrayList<>();
        private String value = "\u2588\u2588";
        private boolean flag = false;

        @Override
        public void routePrint(){
            value = "//";
        }

        @Override
        public boolean getFlag(){
            return flag;
        }

        @Override
        public void setFlag() {
            flag = true;
        }

        @Override
        public void print() {
            System.out.print(value);
        }

        @Override
        public void set(GraphElement cell) {
            edges.add(cell);
        }

        @Override
        public void openPath() {
            value = "  ";
        }

        @Override
        public List<GraphElement> getList() {
            return edges;
        }

        @Override
        public String toString() {
            return value;
        }
    }
  learner_created: true
- name: src/maze/action/acomands/FindOut.java
  visible: true
  text: |
    package maze.action.AComands;

    import java.io.IOException;

    public class FindOut implements Commands{




        @Override
        public void action() throws IOException {

        }
    }
  learner_created: true
- name: src/maze/action/acomands/Print.java
  visible: true
  text: |-
    package maze.action.AComands;

    public class Print implements Commands{
        @Override
        public void action() {
            System.out.println(Loading.getInstance());
        }
    }
  learner_created: true
- name: src/maze/action/acomands/Save.java
  visible: true
  text: |-
    package maze.action.AComands;

    import java.io.*;
    import java.util.Scanner;

    public class Save implements Commands {
        private final Scanner scanner = new Scanner(System.in);
        private final Maze maze = Maze.getInstance();

        @Override
        public void action() {
            String nameFile = scanner.nextLine().trim();
            try (FileWriter writer = new FileWriter("C:\\Users\\Professional\\IdeaProjects\\Maze Runner\\"+nameFile)) {
                writer.write(maze.toString());
            } catch (Exception e) {
                System.out.println("Exception! " + e.getMessage());
            }
        }
    }
  learner_created: true
- name: src/maze/action/acomands/Maze.java
  visible: true
  text: |
    package maze.action.AComands;

    import maze.action.GraphElement;
    import maze.action.Border;
    import maze.action.Edge;
    import maze.action.Node;

    import java.util.*;

    public class Maze implements Commands {
        private static Maze staticMaze;
        private final Set<GraphElement> setNode = new HashSet<>();
        private final List<GraphElement> stackEdge = new ArrayList<>();
        private final Set<GraphElement> route = new HashSet<>();
        private final List<GraphElement> routeEdge = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);
        private GraphElement[][] maze;
        private int size;

        public static Maze getInstance() {
            if (staticMaze == null) {
                staticMaze = new Maze();
            }
            return staticMaze;
        }

        public void completionMaze() {
            for (int x = 0; x < maze.length; x++) {
                for (int y = 0; y < maze[x].length; y++) {
                    if (x == 0 || x == maze.length - 1 || y == 0 || y == maze[x].length - 1) {
                        maze[x][y] = new Border();
                    } else if ((x % 2 == 0 && y == maze[x].length - 2) || (x == maze.length - 2 && y % 2 == 0)) {
                        maze[x][y] = new Node();
                    } else if (x % 2 != 0 && y % 2 != 0) {
                        maze[x][y] = new Node();
                    } else {
                        maze[x][y] = new Edge();
                    }
                }
            }
            generatingEntryExit();
        }

        public void bindingCells() {
            for (int x = 1; x < maze.length - 1; x++) {
                for (int y = 1; y < maze[x].length - 1; y++) {
                    if (x % 2 != 0 && y % 2 != 0) {
                        bindingVertical(x, y);
                        bindingHorizontal(x, y);
                    } else if ((x % 2 == 0 && y == maze[x].length - 1) || (x == maze.length - 1 && y % 2 == 0)) {
                        bindingVertical(x, y);
                        bindingHorizontal(x, y);
                    } else if (x % 2 == 0 && y % 2 != 0) {
                        bindingVertical(x, y);
                    } else if (x % 2 != 0) {
                        bindingHorizontal(x, y);
                    }
                }
            }
            completionDate(maze[1][1]);
        }

        public void bindingVertical(int x, int y) {
            maze[x][y].set(maze[x - 1][y]);
            maze[x][y].set(maze[x + 1][y]);
        }


        public void bindingHorizontal(int x, int y) {
            maze[x][y].set(maze[x][y - 1]);
            maze[x][y].set(maze[x][y + 1]);
        }

        private void generatingEntryExit() {
            maze[0][1] = new Node();
            maze[0][1].openPath();
            if ((maze[0].length) % 2 == 0) {
                maze[maze.length - 1][maze[0].length - 3] = new Node();
                maze[maze.length - 1][maze[0].length - 3].setFlag();
                maze[maze.length - 1][maze[0].length - 3].openPath();
            } else {
                maze[maze.length - 1][maze[0].length - 2] = new Node();
                maze[maze.length - 1][maze[0].length - 2].setFlag();
                maze[maze.length - 1][maze[0].length - 2].openPath();
            }
        }

    //    public void printRoute(GraphElement element){
    //        route.add(element);
    //        element.routePrint();
    //        routeEdge.addAll(element.getList());
    //        while (route.g){
    //            route.
    //        }
    //
    //    }

        public void completionDate(GraphElement cell) {
            setNode.add(cell);
            cell.openPath();
            stackEdge.addAll(cell.getList());
            while (!stackEdge.isEmpty()) {
                Collections.shuffle(stackEdge);
                GraphElement edge = stackEdge.remove(0);
                for (int i = 0; i < edge.getList().size(); i++) {
                    if (!setNode.contains(edge.getList().get(i))) {
                        edge.openPath();
                        completionDate(edge.getList().get(i));
                    }
                }
            }
        }

        public void print() {
            for (GraphElement[] cells : maze) {
                for (GraphElement cell : cells) {
                    cell.print();
                }
                System.out.println();
            }
        }

        @Override
        public void action() {
            stackEdge.clear();
            setNode.clear();
            System.out.println("Enter the size of a new maze");
            final int sizeMaze = scanner.nextInt();
            size = sizeMaze;
            maze = new GraphElement[sizeMaze][sizeMaze];
            completionMaze();
            bindingCells();
            print();
        }

        @Override
        public String toString() {
            String stringMaze = "";
            for (GraphElement[] cells : maze) {
                for (GraphElement cell : cells) {
                    stringMaze += cell.toString();
                }
                stringMaze += "\n";
            }
            return stringMaze;
        }
    }
  learner_created: true
- name: src/maze/action/acomands/NotMenu.java
  visible: true
  text: |
    package maze.action.AComands;


    public class NotMenu implements Commands{

        @Override
        public void action() {
            System.out.println("Incorrect option. Please try again");
        }
    }
  learner_created: true
- name: src/maze/action/acomands/Exit.java
  visible: true
  text: |-
    package maze.action.AComands;


    public class Exit implements Commands {

        @Override
        public void action() {
            System.out.println("Bye!");
            System.exit(0);
        }
    }
  learner_created: true
- name: src/maze/action/acomands/Commands.java
  visible: true
  text: |2

    package maze.action.AComands;

    import java.io.FileNotFoundException;
    import java.io.IOException;

    public interface Commands {
        void action() throws IOException;
    }
  learner_created: true
- name: src/maze/action/acomands/Loading.java
  visible: true
  text: |-
    package maze.action.AComands;


    import java.io.*;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.Scanner;

    public class Loading implements Commands {
        Scanner scanner = new Scanner(System.in);
        private static   Maze load;

        public static Maze getInstance() {
            return load;
        }

        @Override
        public void action() throws IOException {
        String filename = scanner.nextLine();
        File inFile = new File(filename);
            ObjectInputStream in = new ObjectInputStream(new FileInputStream("myarray.ser"));
            try {
            Maze array = (Maze) in.readObject();
            in.close();
            } catch (EOFException | NotSerializableException | ClassNotFoundException e) {
                System.out.println("Cannot load the maze. It has an invalid format");
            } catch (IOException e) {
                e.printStackTrace();
            }
    }
    }
  learner_created: true
- name: test_maze.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5396#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 20 Jan 2023 14:39:23 UTC"
record: 4
